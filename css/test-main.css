body{
  background-color: lightgrey;
}
h1{
  /*text-align: center;*/
  /*text-decoration:underline;*/
  font-size: 40px;
}
h2{
  color: blue;
  text-transform: uppercase;
}

h3{
  margin-bottom: 0px;
}

.wrapper {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
  grid-auto-rows: minmax(100px, auto);
  grid-gap: 10px;

  max-width: 815px;
  background-color: white;
  border: 2px solid red;
  padding: 10px 10px;
  margin: 20px auto;
}

.item {
  border: 1px solid blue;
  padding: 0px 20px;
}

.content{
  display: grid;
  grid-template-columns: 80px 1fr;
}

.date{
  font-style: italic;
  color: blue;
  /*border: 1px solid red;*/
}

.description{
  /*border: 1px solid red;*/
  text-align: justify;
}

#header {
  grid-column: 1 / -1;
  /*There’s this sneaky -1 value that you’ll use frequently to span the full grid container, and it’s all because your grid is one more than the number of columns/rows defined; it really has to do with tracks. This track officially ends at the end of your grid container.*/
  /*This example starts at the first column and spans the full width of the defined grid regardless the number of columns defined in your CSS. Cool right? Heck yeah it is!*/
}

#contact {
  grid-column: 1 / -1;
}